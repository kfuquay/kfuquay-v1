---
import type { CollectionEntry } from "astro:content";

import Base from "@/layouts/Base.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import FormattedDate from "@/components/FormattedDate.astro";
import SkipLink from "@/components/SkipLink.astro";

type Props = CollectionEntry<"blog">["data"];

const {
  title = "",
  description,
  pubDate,
  updatedDate,
  heroImage = "/src/assets/keyboard.jpg",
  tags,
} = Astro.props;
import { getCollection } from "astro:content";
const posts = (await getCollection("blog")).sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

import type { ImageMetadata } from 'astro';
import { Image, getImage } from 'astro:assets';
const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png,gif}')
if (!images[heroImage]) throw new Error(`"${heroImage}" does not exist in glob: "/src/assets/*.{jpeg,jpg,png,gif}"`);

const hero = images[heroImage]();

const blurredPlaceholder = await getImage({
  src: images[heroImage](),
  width: 944,
  height: 384,
  format: 'webp',
})

---

<Base>
  <SkipLink />
  <Header />
  <main id="main" class="container mx-auto md:px-10 text-white">
    <article >
      <div class="relative mb-20" transition:animate="fade">
        <span class="bg-black bg-opacity-25 w-full h-full absolute"></span>
        <div class="absolute bottom-10 md:left-20 left-6 z-10 bg-black bg-opacity-10 p-6 rounded-sm ">
          <h1 class="text-4xl md:text-7xl font-semibold line-clamp-2 max-w-[90%]">
            {title}
          </h1>
          <p class="text-lg text-white max-w-[90%] mt-4" set:html={description} />
        </div>
        <div class="relative h-96 w-full">
          <img src={blurredPlaceholder.src} alt="Blurred placeholder" class="blur-md h-96 w-full object-cover transition:opacity ease-in-out absolute"/>
          <Image src={hero}  alt={title} id="main-image" class="h-96 w-full object-cover opacity-0 transition-opacity ease-in-out absolute" format="webp" widths={[300, 600, 900]} sizes="(max-width: 900px) 100vw, 900px" loading="lazy" />
        </div>
      </div>
      <div class="text-black px-6 md:px-0">
        <div class="">
          <div class="text-sm text-pblack flex items-center justify-between">
            <FormattedDate date={pubDate} />
            {
              updatedDate && (
                <div class="last-updated-on">
                  Last updated on <FormattedDate date={updatedDate} />
                </div>
              )
            }
          </div>

          <hr />
        </div>
        <div class="flex justify-between py-10 lg:flex-row flex-col">
          <div class="prose lg:w-1/2 flex flex-col">
            <slot />
          </div>
          <div class="flex flex-col gap-6" transition:animate="slide">
            <ul class="flex flex-col gap-4 pt-10 lg:pt-0 items-start lg:items-end">
              <p class="lg:hidden font-semibold">Read More:</p>
              {
                posts.map((post) => {
                  return (
                    <li class="text-left rounded-lg border-1 border-black shadow-card group hover:shadow-hover transition  px-2 py-2" >
                      <a
                        href={`/blog/${post.id}/`}
                      >
                        <h3 >{post.data.title}</h3>
                      </a>
                    </li>
                  );
                })
              }
            </ul>
          </div>
        </div>
      </div>
    </article>
  </main>
  <Footer />
</Base>

<style>
  #main-image.loaded {
    opacity: 1;
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    const mainImage = document.querySelector('#main-image');
    if (mainImage) {
      mainImage.addEventListener('load', () => {
        mainImage.classList.add('loaded');
      });
    }
  });
</script>